/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package ps;

import java.awt.AWTException;
import java.awt.MouseInfo;
import java.awt.Point;
import java.awt.Robot;
import java.awt.event.InputEvent;
import java.awt.event.KeyEvent;
import java.util.logging.Level;
import java.util.logging.Logger;


/**
 *
 * @author ricain
 */
public class GlobalJFrame extends javax.swing.JFrame {

    public static final int initial_y = 354;
    public static final int initial_x = 159;
    public static final int hand_y = 518;
    public static final int hand_x = 187;
    public Boolean continueDt = false;
    
    /**
     * Creates new form GlobalJFrame
     */
    public GlobalJFrame(){
        initComponents();
        this.show();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButtonStart = new javax.swing.JButton();
        jButtonStop = new javax.swing.JButton();
        jButtonPause = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButtonStart.setText("Start");
        jButtonStart.setActionCommand("jButtonStart");
        jButtonStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonStartActionPerformed(evt);
            }
        });

        jButtonStop.setText("Stop");
        jButtonStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonStopActionPerformed(evt);
            }
        });

        jButtonPause.setText("Pause");
        jButtonPause.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPauseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButtonPause, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonStop, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonStart, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(40, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButtonStart)
                .addGap(18, 18, 18)
                .addComponent(jButtonStop)
                .addGap(18, 18, 18)
                .addComponent(jButtonPause)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonStartActionPerformed
        // TODO add your handling code here:
        boolean contar = true;
        int n = 5;
        try {
            while(contar)
            {
                if(n != 0)
                {
                    Thread.sleep(1000);
                    n = n -1;
                }else{
                    contar = false;
                }
            }
        } catch (InterruptedException ex) {
            Logger.getLogger(GlobalJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        continueDt = true;
        Runnable task = new Runnable() {
            @Override
            public void run() {                
                try {
                    Dt();
                } catch (AWTException ex) {
                    Logger.getLogger(GlobalJFrame.class.getName()).log(Level.SEVERE, null, ex);
                } catch (InterruptedException ex) {
                    Logger.getLogger(GlobalJFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        };
        new Thread(task).start();
    }//GEN-LAST:event_jButtonStartActionPerformed

    private void jButtonStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonStopActionPerformed
        // TODO add your handling code here:
        continueDt = false;
    }//GEN-LAST:event_jButtonStopActionPerformed

    private void jButtonPauseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPauseActionPerformed
        // TODO add your handling code here:
        if(continueDt)
        {
            continueDt = false;
            jButtonPause.setText("Reprendre");
        }else{
            continueDt = true;
            jButtonPause.setText("Pause");
        }        
    }//GEN-LAST:event_jButtonPauseActionPerformed

    /**
     * @param args the command line arguments
     */
   

    public void Dt() throws AWTException, InterruptedException
    {
        Robot robot = new Robot();
        ClipboardPs handcopy = new ClipboardPs();
        while(true)
        {
            while (continueDt) 
            {
                //ici pour mettre la souris ou je veux apres avoir sélectionner la main ou pour sélectionner le contenu de la main          
                robot.mouseMove(initial_x, initial_y);

                //ici c'est mon debug
//                Point location = MouseInfo.getPointerInfo().getLocation();
//                System.out.println("x = " + location.getX());
//                System.out.println("y = " + location.getY());

                //ici pour apres sélectionner la premiere ligne de mon 
                // Simulate a mouse click
                robot.mousePress(InputEvent.BUTTON1_MASK);
                robot.mouseRelease(InputEvent.BUTTON1_MASK);

                // Simulate a key press touche vers le bas
//                robot.keyPress(KeyEvent.VK_DOWN);
//                robot.keyRelease(KeyEvent.VK_DOWN);

                //ici c'est pour copier la main
                //d'abord bouger la souris
                robot.mouseMove(hand_x, hand_y);

                //maintenant crtl + a pour copier
                robot.keyPress(KeyEvent.VK_CONTROL);
                robot.keyPress(KeyEvent.VK_A);
                robot.keyRelease(KeyEvent.VK_CONTROL);
                robot.keyRelease(KeyEvent.VK_A);

                //copier
                robot.keyPress(KeyEvent.VK_CONTROL);
                robot.keyPress(KeyEvent.VK_C);
                robot.keyRelease(KeyEvent.VK_CONTROL);
                robot.keyRelease(KeyEvent.VK_C);

                //coller
                handcopy.ClipboardPs();

                Thread.sleep(500);
            }
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JButton jButtonPause;
    private javax.swing.JButton jButtonStart;
    private javax.swing.JButton jButtonStop;
    // End of variables declaration//GEN-END:variables
}
